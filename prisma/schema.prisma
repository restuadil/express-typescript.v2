// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  cartItems Cart[]
  reviews   Review[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Product {
  id          String            @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  images      String[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  reviews     Review[]
  orderItems  OrderItem[]
  cartItems   Cart[]
  categories  ProductCategory[]

  @@map("products")
}

model Category {
  id       String            @id @default(uuid())
  name     String            @unique
  products ProductCategory[]

  @@map("categories")
}

model ProductCategory {
  productId  String
  categoryId String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId]) // Composite Primary Key
  @@map("product_categories")
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  total      Float
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]
  payment    Payment?
  shipping   Shipping?

  @@map("orders")
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float

  @@map("order_items")
}

model Payment {
  id        String        @id @default(uuid())
  orderId   String        @unique
  order     Order         @relation(fields: [orderId], references: [id])
  method    PaymentMethod
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())

  @@map("payments")
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  PAYPAL
  COD
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  @@map("reviews")
}

model Shipping {
  id        String         @id @default(uuid())
  orderId   String         @unique
  order     Order          @relation(fields: [orderId], references: [id])
  address   String
  city      String
  zipCode   String
  status    ShippingStatus @default(PENDING)
  createdAt DateTime       @default(now())

  @@map("shippings")
}

enum ShippingStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}
